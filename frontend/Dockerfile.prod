ARG APP_ENV=production

# Install dependencies only when needed
FROM public.ecr.aws/docker/library/node:lts-alpine3.16 AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /usr/src/app
COPY package.json yarn.lock ./
RUN yarn install --frozen-lockfile

# Rebuild the source code only when needed
FROM public.ecr.aws/docker/library/node:lts-alpine3.16 AS builder
WORKDIR /usr/src/app
COPY --from=deps /usr/src/app/node_modules ./node_modules
COPY . .

ARG APP_ENV
ENV NEXT_PUBLIC_APP_ENV $APP_ENV

ENV NODE_ENV=production

# Use the corresponding env file for each environment.
# See https://nextjs.org/docs/basic-features/environment-variables for
# more details on loading environment variables.
COPY .env.${APP_ENV} .env.production

RUN yarn build 

# Production image, copy all the files and run next
FROM public.ecr.aws/docker/library/node:lts-alpine3.16 AS runner
WORKDIR /usr/src/app

RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

COPY --from=builder /usr/src/app/next.config.js ./
COPY --from=builder /usr/src/app/public ./public
COPY --from=builder /usr/src/app/package.json ./package.json

COPY --from=builder --chown=nextjs:nodejs /usr/src/app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /usr/src/app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

# Disabled NextJS telemetry
ENV NEXT_TELEMETRY_DISABLED 1

CMD ["node", "server.js"]
