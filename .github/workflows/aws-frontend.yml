name: Deploy frontend to AWS ECS

on:
  push:
    branches:
      - main
      - master
      - "ci/aws-ecs"
    paths:
      - "frontend/"
  pull_request:

env:
  AWS_REGION: eu-north-1 # Set this to our AWS region
  ECR_REPOSITORY: indokweb-frontend # Set this to our ECR repository name, e.g. indokweb-frontend
  ECS_SERVICE: indokweb-frontend-fg-service # Set this to our ECS service name, e.g. indokweb-frontend-fg-service
  ECS_CLUSTER: indokweb-cluster # Set this to our ECS cluster name, e.g. indokweb-cluster
  ECS_TASK_DEFINITION: .aws/task-definition.frontend.json # Set this to the path to the task definition, e.g. .aws/frontend-task-definition.json
  CONTAINER_NAME: frontend # Set this to the container name in the task definition above, e.g. frontend

jobs:
  deploy:
    name: Deploy frontend to AWS ECS
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Frontend secrets are needed at build-time.
      - name: Build, tag, and push image to AWS ECR
        id: build-image
        uses: docker/build-push-action@v2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          NEXT_PUBLIC_GRAPHQL_BACKEND_URI: "https://api.indokntnu.no/graphql"
          NEXT_PUBLIC_FRONTEND_URI: "https://indokntnu.no"
          DATAPORTEN_ID: "f17d2ea0-a7c9-4458-83bf-35cf5b555cae"
          DATAPORTEN_REDIRECT_URI: "https://indokntnu.no/authCallback"
          NEXT_PUBLIC_DATAPORTEN_STATE: "RGpBPYszuqXVvsma1suHJJ4X7ZJjkfS6njRHnx4p"
        with:
          context: ./frontend
          tags: "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          push: true
          secrets: |
            "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}"
            "NEXT_PUBLIC_GRAPHQL_BACKEND_URI=${{ env.NEXT_PUBLIC_GRAPHQL_BACKEND_URI }}"
            "NEXT_CONTAINER_GRAPHQL_BACKEND_URI=${{ env.NEXT_CONTAINER_GRAPHQL_BACKEND_URI }}"
            "NEXT_PUBLIC_DATAPORTEN_ID=${{ env.NEXT_PUBLIC_DATAPORTEN_ID}}"
            "NEXT_PUBLIC_DATAPORTEN_REDIRECT_URI=${{ env.NEXT_PUBLIC_DATAPORTEN_REDIRECT_URI}}"
            "NEXT_PUBLIC_DATAPORTEN_STATE=${{ env.NEXT_PUBLIC_DATAPORTEN_STATE}}"
        run: |
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # - name: Build, tag, and push image to AWS ECR
      #   id: build-image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     # Build a docker container and
      #     # tag it so that it can be pushed to
      #     # Amazon ECR
      #     docker build -f frontend/Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./frontend
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true

      # - name: Create Sentry Release
      #   uses: getsentry/action-release@v1.1.6
      #   env:
      #     SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      #     SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      #     SENTRY_PROJECT: ${{ secrets.FRONTEND_SENTRY_PROJECT }}
      #   with:
      #     environment: production
